<configuration>
    <!--注册转换器，颜色转化器-->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>

    <!-- 二、子节点<contextName>：用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。-->
    <contextName>springboot-base-frame</contextName>

    <!-- 三、子节点<property> -->
    <!--子节点<property name="" value=""> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。-->
    <!--子节点<property resource=""/> ：用来引入外部属性文件，可以使“${}”来使用变量。-->

    <!--<property resource="application.yml"/>-->
    <springProperty scope="context" name="logback.dir" source="logback.dir"/>
    <springProperty scope="context" name="logback.filename.all" source="logback.filename.all"/>
    <springProperty scope="context" name="logback.filename.info" source="logback.filename.info"/>
    <springProperty scope="context" name="logback.filename.warn" source="logback.filename.warn"/>
    <springProperty scope="context" name="logback.filename.error" source="logback.filename.error"/>
    <springProperty scope="context" name="logback.maxhistory" source="logback.maxhistory"/>
    <springProperty scope="context" name="logback.maxfilesize" source="logback.maxfilesize"/>
    <springProperty scope="context" name="logback.level" source="logback.level"/>
    <springProperty scope="context" name="logback.charset" source="logback.charset"/>
    <springProperty scope="context" name="logback.CONSOLE_LOG_PATTERN" source="logback.CONSOLE_LOG_PATTERN"/>
    <springProperty scope="context" name="logback.FILE_LOG_PATTERN" source="logback.FILE_LOG_PATTERN"/>

    <!--日志输出格式-->
    <!--控制台-彩色-->
    <!--<property name="CONSOLE_LOG_PATTERN" value="%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}) %boldYellow([%thread]) %highlight(%-5level) %boldGreen(%logger{50}) - %msg%n" />-->
    <!--文件-黑白-->
    <!--<property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />-->

    <!-- 四、子节点<appender>：负责写日志的组件，它有两个必要属性name和class。name指定appender名称，class指定appender的全限定名 -->
    <!--4.1 class为ch.qos.logback.core.ConsoleAppender 把日志输出到控制台-->
    <!--4.2 class为ch.qos.logback.core.FileAppender 把日志添加到文件-->
    <!--4.3 class为ch.qos.logback.core.rolling.RollingFileAppender 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件-->

    <!-- 控制台输出 -->
    <!--<if condition='property("ifOpenConsol").contains("true")'>-->
    <!--<if condition='p("ifOpenConsol").contains("true")'>-->
    <!--<then>-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${logback.CONSOLE_LOG_PATTERN}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
        <!--字符串 System.out 或者 System.err ，默认 System.out -->
        <target>System.out</target>
    </appender>
    <!--</then>-->
    <!--</if>-->

    <!--日志记录器，日期滚动记录-->
    <!-- 按照每天生成日志文件 -->
    <!-- INFO -->
    <appender name="FILE-INFO" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--日志文件的路径及文件名-->
        <!--被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值-->
        <file>${logback.dir}/${logback.filename.info}.log</file>
        <!-- 如果 true，事件被追加到现存文件尾部。如果 false，清空现存文件.默认为 true -->
        <append>true</append>
        <!--临界值过滤器，过滤掉低于指定临界值的日志。当日志级别等于或高于临界值时，过滤器返回NEUTRAL；当日志级别低于临界值时，日志会被拒绝-->
        <!-- 此日志文件只记录INFO级别的 -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <!--当发生滚动时，决定 RollingFileAppender 的行为-->
        <!--日志记录器的滚动策略，按日期，按大小记录,涉及文件移动和重命名-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2018-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            而2018-09-21的归档日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <!--即file和fileNamePattern同时制定，当天日志名由file决定，前一天的文件名将自动改为fileNamePattern的值-->
            <!-- 若要加一层时间目录 <fileNamePattern>${logback.dir}/%d{yyyy-MM-dd,aux}/${logback.filename.info}.%i.log.gz</fileNamePattern>-->
            <fileNamePattern>${logback.dir}/${logback.filename.info}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!--控制被保留的归档文件的最大数量，超出数量就删除旧文件-->
            <!--日志文件保留天数 -->
            <maxHistory>${logback.maxhistory}</maxHistory>|
            <!--指定文件的大小-->
            <maxFileSize>${logback.maxfilesize}</maxFileSize>
        </rollingPolicy>
        <!--负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流-->
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
            <pattern>${logback.FILE_LOG_PATTERN}</pattern>
            <!--日志字符编码格式-->
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>

    <!-- ALL -->
    <appender name="FILE-ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.dir}/${logback.filename.all}.log</file>
        <append>true</append>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logback.dir}/${logback.filename.all}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>${logback.maxhistory}</maxHistory>
            <maxFileSize>${logback.maxfilesize}</maxFileSize>
            。  </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${logback.FILE_LOG_PATTERN}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>

    <!-- WARN -->
    <appender name="FILE-WARN" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.dir}/${logback.filename.warn}.log</file>
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>WARN</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logback.dir}/${logback.filename.warn}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>${logback.maxhistory}</maxHistory>
            <maxFileSize>${logback.maxfilesize}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${logback.FILE_LOG_PATTERN}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>


    <!-- ERROR -->
    <appender name="FILE-ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.dir}/${logback.filename.error}.log</file>
        <append>true</append>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logback.dir}/${logback.filename.error}.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxHistory>${logback.maxhistory}</maxHistory>
            <maxFileSize>${logback.maxfilesize}</maxFileSize>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${logback.FILE_LOG_PATTERN}</pattern>
            <charset>${logback.charset}</charset>
        </encoder>
    </appender>


    <!-- 五、子节点<logger>：用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger-->
    <!-- 六、子节点<root>:它也是<logger>元素，但是它是根logger,是所有<logger>的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。-->

    <!-- 生产环境下，将此级别配置为适合的级别，以免日志文件太多或影响程序性能 -->
    <!--这里改level-->
    <root level="${logback.level}">
        <appender-ref ref="STDOUT"/>
        <!--<appender-ref ref="FILE-ALL"/>-->
        <!--<appender-ref ref="FILE-INFO"/>-->
        <appender-ref ref="FILE-WARN"/>
        <appender-ref ref="FILE-ERROR"/>
    </root>
</configuration>
